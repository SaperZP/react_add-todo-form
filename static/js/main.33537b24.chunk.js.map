{"version":3,"sources":["components/TodoInfo/TodoInfo.tsx","components/UserInfo/UserInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["TodoInfo","todo","className","title","UserInfo","user","href","name","username","TodoList","todos","map","id","classNames","completed","email","preparedTodos","userId","matchedUser","usersFromServer","find","App","useState","tasks","setTasks","taskTitle","setTaskTitle","hasTitleError","setTitleError","assignedUserId","setAssignedUserId","hasUserError","setUserError","action","method","onSubmit","event","preventDefault","newTask","sort","taskA","taskB","length","onChange","target","value","type","placeholder","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33537b24.chunk.js","sourcesContent":["type Props = {\n  todo: PrepearedTodo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n  );\n};\n","type Props = {\n  user: User | null,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return user\n    ? (\n      <a className=\"UserInfo\" href=\"mailto:Sincere@april.biz\">\n        {`${user.name} (${user.username})`}\n      </a>\n    )\n    : (\n      <p>\n        task is not asigned\n      </p>\n    );\n};\n","import classNames from 'classnames';\n\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todos: PrepearedTodo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      {\n        todos.map(todo => (\n          <article\n            data-id={todo.id}\n            className={classNames(\n              'TodoInfo',\n              {\n                'TodoInfo--completed': todo.completed,\n              },\n            )}\n            key={todo.id}\n          >\n            <TodoInfo todo={todo} />\n            <UserInfo user={todo.user} />\n          </article>\n        ))\n      }\n    </>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst preparedTodos = todosFromServer.map(todo => {\n  const matchedUser = usersFromServer\n    .find(user => user.id === todo.userId) || null;\n\n  return { ...todo, user: matchedUser };\n});\n\nexport const App = () => {\n  const [tasks, setTasks] = useState(preparedTodos);\n  const [taskTitle, setTaskTitle] = useState('');\n  const [hasTitleError, setTitleError] = useState(false);\n  const [assignedUserId, setAssignedUserId] = useState(0);\n  const [hasUserError, setUserError] = useState(false);\n\n  function addNewTask(event: React.FormEvent) {\n    event.preventDefault();\n\n    const newTaskId = tasks\n      .sort((taskA, taskB) => taskA.id - taskB.id)[tasks.length - 1].id + 1;\n\n    const newTask: PrepearedTodo = {\n      id: newTaskId,\n      title: taskTitle,\n      completed: false,\n      userId: assignedUserId,\n      user: usersFromServer.find(user => user.id === assignedUserId) || null,\n    };\n\n    setTitleError(!taskTitle);\n    setUserError(!assignedUserId);\n\n    if (!taskTitle || !assignedUserId) {\n      return;\n    }\n\n    setTasks([...tasks, newTask]);\n    setTaskTitle('');\n    setAssignedUserId(0);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={addNewTask}\n      >\n        <div className=\"field\">\n          <input\n            data-cy=\"titleInput\"\n            onChange={(event) => {\n              setTitleError(false);\n              setTaskTitle(event.target.value);\n            }}\n            value={taskTitle}\n            type=\"text\"\n            placeholder=\"Enter a title\"\n          />\n\n          {hasTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            onChange={event => {\n              setAssignedUserId(+event.target.value);\n              setUserError(false);\n            }}\n            value={assignedUserId}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.username}</option>\n            ))}\n          </select>\n\n          {hasUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <section className=\"TodoList\">\n        <TodoList todos={tasks} />\n      </section>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}